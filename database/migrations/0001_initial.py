# Generated by Django 2.2.9 on 2020-01-18 23:24

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0011_update_proxy_permissions"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "password",
                    models.CharField(max_length=128, verbose_name="password"),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=30, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        verbose_name="email address",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="date joined",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[("objects", django.contrib.auth.models.UserManager()),],
        ),
        migrations.CreateModel(
            name="Author",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_dummy_data",
                    models.BooleanField(
                        default=False,
                        verbose_name="Instance was generated as dummy data",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="First name of the author",
                    ),
                ),
                (
                    "middle_name",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Middle name(s) of the author",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        max_length=200, verbose_name="Last name of the author"
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="Journal",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_dummy_data",
                    models.BooleanField(
                        default=False,
                        verbose_name="Instance was generated as dummy data",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=200, verbose_name="Name of the journal"
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="Publisher",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_dummy_data",
                    models.BooleanField(
                        default=False,
                        verbose_name="Instance was generated as dummy data",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=200, verbose_name="Name of the publisher"
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="City the publisher is located in",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="Source",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_dummy_data",
                    models.BooleanField(
                        default=False,
                        verbose_name="Instance was generated as dummy data",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        max_length=400, verbose_name="Title of the source"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("AR", "Article"), ("BK", "Book")],
                        default="AR",
                        max_length=2,
                        verbose_name="Type of the source",
                    ),
                ),
                (
                    "year_of_publication",
                    models.IntegerField(
                        verbose_name="Publisher of the source"
                    ),
                ),
                (
                    "journal_page_range_start",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Index of the journal page where the article begins.",
                    ),
                ),
                (
                    "journal_page_range_end",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Index of the journal page where the article ends.",
                    ),
                ),
                (
                    "abstract",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="The abstract of the source.",
                    ),
                ),
                (
                    "authors",
                    models.ManyToManyField(
                        related_name="sources",
                        to="database.Author",
                        verbose_name="Authors of the source",
                    ),
                ),
                (
                    "source_journal",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="database.Journal",
                        verbose_name="Journal the source was published in (if applicable)",
                    ),
                ),
                (
                    "source_publisher",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="books",
                        to="database.Publisher",
                        verbose_name="Publisher of the source (if applicable)",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="Reference",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_dummy_data",
                    models.BooleanField(
                        default=False,
                        verbose_name="Instance was generated as dummy data",
                    ),
                ),
                (
                    "reference",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cited",
                        to="database.Source",
                        verbose_name="The source being referred to ('TO')",
                    ),
                ),
                (
                    "referrer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="citations",
                        to="database.Source",
                        verbose_name="The source making the reference ('FROM')",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.AddField(
            model_name="journal",
            name="journal_publisher",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="journals",
                to="database.Publisher",
                verbose_name="Publisher of the journal",
            ),
        ),
        migrations.CreateModel(
            name="Evaluation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_dummy_data",
                    models.BooleanField(
                        default=False,
                        verbose_name="Instance was generated as dummy data",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        default=django.utils.timezone.now,
                        verbose_name="Date of the evaluation.",
                    ),
                ),
                (
                    "comments",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Comments made by the user",
                    ),
                ),
                (
                    "favorited",
                    models.BooleanField(
                        default=False,
                        verbose_name="A boolean indicating if the source has been favorited by the user.",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="database.Source",
                        verbose_name="The source being evaluated",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User making the evaluation",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
    ]
